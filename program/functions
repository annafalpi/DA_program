pley(){
    /mnt/c/Program\ Files\ \(x86\)/sox-14-4-2/sox.exe $1 -t waveaudio
}

# per poder fer-ne ús des del terminal --> source ./function_lib/function 


function EXTENSION_2_WAV(){
    if [ "${n##*.}" != 'wav' ]; then       
        if [ $permision = "y" ]; then
            echo "CONVERTING " $n " in a .wav file" 
            if [ "${n##*.}" = 'mp3' ]; then
                file=$(basename $n .mp3).wav
                sox -v 0.99 $n -c 1 $root/$workingDIR/$file
                rm $n
            elif [ "${n##*.}" = 'raw' ]; then
                file=$(basename $n .raw).wav
                sox -t raw -r 44100 -b 16 -c 1 -L -e signed-integer $n $root/$workingDIR/$file
                rm $n
            else
                echo "DATA AUGMENTATION SOFTWARE FAIL : file EXTENSION not supported"
            fi
        else
            exit
        fi
    fi
    
}

function create_folder(){
#Crea una carpeta si aquesta no existeix
    if [ ! -d $DIR/$folder_name ] 
    then
        cd $DIR
        mkdir $folder_name
    fi  
}

function pitch_shifting(){
    echo "pitch shiting to  " $file 
    folder_name='PITCH_SHIFT'
    create_folder $DIR $folder_name
    cd $root/$workingDIR 
    if [ $shift_mode = "fixed" ] && [ -z $shift_start ] && [ -z $shift_end ]; then
        sox -v 0.99 $file $DIR/PITCH_SHIFT/$(basename $file) pitch $cents        
    elif [ $shift_mode = "fixed" ] && [ $shift_start ] && [ $shift_end ]; then
        #FALTARIA COMPROVAR QUE ELS LÍMITS ESTIGUIN DINS DE l'ÀUDIO
        end=$t_start+$t_end
        sox $file $DIR/PITCH_SHIFT/$(basename $file) bend $shift_start,$cents,$shift_end
        echo $cents $shift_start $shift_end
    elif [ $shift_mode = 'random' ] ; then                        #si "RANDOM" llavors factor t i T son aleatòri
        echo "RANDOM"
        tf=$(soxi -D $file)
        tf=${tf%.*}                                         #Duració completa de l'àudio
        start=$((0 + $RANDOM%$tf))                          #Inici BEND
        end=$(($start +1+ $RANDOM%$(($tf-$start))))         #Final BEND
        number=$(($RANDOM%800-800))                         #número aleatòri entre [-800,800] cents
        echo $number $start $end $tf
        sox -v 0.99 $file $DIR/PITCH_SHIFT/$(basename $file) bend $start,$number,$end
    fi
}

function time_scretching(){
    echo "time stretching to  " $file 
    folder_name='TIME_STRETCHING'
    create_folder $DIR $folder_name
    cd $root/$workingDIR 
    if [ $stretch_mode = "fixed" ] && [ -z $stretch_start ] && [ -z $stretch_end ]; then
        sox $file $DIR/TIME_STRETCHING/$(basename $file) tempo $speed_factor
    elif [ $stretch_mode = "fixed" ] && [ $stretch_start ] && [ $stretch_end ]; then
        trim_segments
        sox $DIR/temp/segment2.wav $DIR/temp/segment2_speed.wav tempo $speed_factor           #TIME STRETCHING del segment
        sox $DIR/temp/segment1.wav $DIR/temp/segment2_speed.wav $DIR/temp/segment3.wav $DIR/TIME_STRETCHING/$(basename $file)       #Combinar segments
    elif [ $stretch_mode = 'random' ] ; then 
        tf=$(soxi -D $file)
        tf=${tf%.*}                                         #Duració completa de l'àudio
               
        start=$((0 + $RANDOM%$tf))                          #Inici tall
        end=$(($start +1+ $RANDOM%$(($tf-$start))))         #Final tall
        number=$(seq 0.4 .01 2 | shuf | head -n1)           #número aleatòri entre [0.4, 2] 
        echo $number $start $end $tf
        trim_segments
        sox $DIR/temp/segment2.wav $DIR/temp/segment2_speed.wav tempo $number          #TIME STRETCHING del segment
        sox $DIR/temp/segment1.wav $DIR/temp/segment2_speed.wav $DIR/temp/segment3.wav $DIR/TIME_STRETCHING/$(basename $file)       #Combinar segments
    fi  
}

function trim_segments(){
    tf=$(soxi -D $file)                                                         #Definir final de l'àudio
    sox $file $DIR/temp/segment1.wav trim 0 $stretch_start                               #Retallar el primer segment
    local duration_2=$stretch_end-$stretch_start                                                #Establir durada del segon segment
    sox $file $DIR/temp/segment2.wav trim $stretch_start $duration_2                     #Retallar segon segment
    local duration_3=$tf-$stretch_end                                                  #Establir durada del tercer segment
    sox $file $DIR/temp/segment3.wav trim $end $stretch_end                     #Retallar tercer segment
}

function noise_adding(){
    check_sample_rate
    echo "noise adding to  " $file 
    folder_name='NOISE_ADDING'
    create_folder $DIR $folder_name 
    cd $root/$workingDIR

    if [ -z $NOISE_SAMPLE ]; then
        local noise_duration=$(soxi -D $file)  
        noise_generator $noise_duration                                                 # creació de soroll de la llargada de la mostra
        sox -m $DIR/temp/noise.wav $file $DIR/NOISE_ADDING/$(basename $file)            # mescla
    else 
        local tf=$(soxi -D $file)                                                       # llargada de la mostra original
        local tf_noise=$(soxi -D  $root/program_samples/$NOISE_SAMPLE)                   # llargada de la mostra de soroll
        #echo "FILE LENGHT: " $tf "; NOISE LENGHT: " $tf_noise
        change_noise_volume
        if [ $(echo "$tf_noise > $tf" |bc -l) == 1 ]; then                              # si el temps noise és superior a la mostra, no cal allargar-lo
            sox $root/program_samples/$NOISE_SAMPLE $DIR/temp/noise.wav trim 0 $tf       # retallar soroll a llargada de l'original
            sox -m -v $volume $DIR/temp/noise.wav $file $DIR/NOISE_ADDING/$(basename $file)        # mescla soroll retallat i original
        else
            local aux=`echo "$tf/$tf_noise" | bc`                                       # Part entera
            cp $root/program_samples/$NOISE_SAMPLE $DIR/temp/noise_aux.wav              # Copia a la carpeta temporal per tenir audio incial a replicar
            for (( c=1; c<=$aux; c++ )); do  
                sox $root/program_samples/$NOISE_SAMPLE $DIR/temp/noise_aux.wav $DIR/temp/noise_aux.wav          # replicar tants cops com parts enteres
            done
            sox $DIR/temp/noise_aux.wav $DIR/temp/noise.wav trim 0 $tf                  # Retall del soroll replicat
            sox -m -v $volume $DIR/temp/noise.wav $file $DIR/NOISE_ADDING/$(basename $file)         # mescla
        fi
    fi
    #compute_SNR        NO te sentit calcular SNR pq el soroll no se lia ha aplicat el $volume, s'ha aplicat directament a la mescla.


}


function change_noise_volume(){

    value_name="RMS     amplitude:"
    local audio=$file                                               # Treiem valors del fitxer original
    extract_from_STAT
    local RMS_file=$value                                               # valor RMS de l'àudio original
        
    local audio=$root/program_samples/$NOISE_SAMPLE                                     # Treiem valors del soroll
    extract_from_STAT
    local RMS_noise=$value                         
    
    product=`echo "$RMS_noise*$ratio" | bc`

    volume=`echo " scale=6; $RMS_file/$product" | bc`

    #echo "FILE RMS: " $RMS_file "RMS NOISE: " $RMS_noise  "VOLUME FACTOR: " $volume

    : '
    sox -v $volume $root/program_samples/$NOISE_SAMPLE $DIR/temp/auxiliar_audio.wav
    local audio=$DIR/temp/auxiliar_audio.wav
    extract_from_STAT 
    local RMS_noise=$value    
    echo "MODIFIED NOISE RMS: " $RMS_noise  

    cp $DIR/temp/auxiliar_audio.wav $root/program_samples/$noiseDIR/$(basename $NOISE_SAMPLE) 
    '

}


function check_sample_rate(){
    file_sr=$(soxi -r $file)
    noise_sr=$(soxi -r $root/program_samples/$NOISE_SAMPLE)
    if [ $file_sr -ne $noise_sr ]; then
        noiseDIR=${NOISE_SAMPLE%/*}
        echo "Selected noise sample has not same Sampling Freq that input file. It must be converted"
        echo "CAUTION: ORIGINAL FILE WILL BE REMOVED!!"
        echo "Do you want to convert it? (y/n)"
        read permision
        if [ $permision = "y" ]; then
            echo "HERE"
            echo $(basename $NOISE_SAMPLE)
            cd $root
            sox $root/program_samples/$NOISE_SAMPLE -r $file_sr $DIR/temp/$(basename $NOISE_SAMPLE)
            rm $root/program_samples/$NOISE_SAMPLE
            cp $DIR/temp/$(basename $NOISE_SAMPLE) $root/program_samples/$noiseDIR/$(basename $NOISE_SAMPLE) 

        else
            exit
        fi
        cd $root/$workingDIR
    fi

}

function sample_expansion(){
    local aux=`echo "$tf/$tf_noise" | bc`
    cp $DIR/NOISE_SAMPLES/metro_trim.wav $DIR/temp/noise_aux.wav 
    for (( c=1; c<=$aux; c++ )); do  
        sox $DIR/NOISE_SAMPLES/metro_trim.wav $DIR/temp/noise_aux.wav $DIR/temp/noise_aux.wav 
    done
    tf_noise=$(soxi -D  $DIR/temp/noise_aux.wav)
    sox $DIR/temp/noise_aux.wav $DIR/temp/noise.wav trim 0 $tf
    sox -m $DIR/temp/noise.wav $file $DIR/NOISE_ADDING/$(basename $file)

}

function noise_generator(){
    NOISE_TYPE='white'
    if [ $NOISE_TYPE = 'white' ]; then
        sox -r 44100 -c 1 -b 16 -n $DIR/temp/noise.wav synth $noise_duration whitenoise vol 0.20
    elif [ $NOISE_TYPE = 'pink' ]; then
        sox -r 44100 -c 1 -b 16 -n $DIR/temp/noise.wav synth $noise_duration pinknoise vol 0.20
    elif [ $NOISE_TYPE = 'brown' ]; then
        sox -r 44100 -c 1 -b 16 -n $DIR/temp/noise.wav synth $noise_duration brownnoise vol 0.20
    fi
}


function FIR_conv(){
    echo "RIR filter to  " $file 
    folder_name='RIR_filter'
    create_folder $DIR $folder_name
    cd $root/$workingDIR
    sox -v 1.5 $file $DIR/RIR_filter/$(basename $file) fir $root/program_samples/$RIR_file   

}


function show_Directori(){
    DIRact="$( cd -P "$( dirname -- "$SOURCE"; )" &> /dev/null && pwd 2> /dev/null )"
    echo $DIRact
}

function chorus_efect(){
    folder_name='CHORUS'
    create_folder $DIR $folder_name 
    cd $DIR/WAV_FILES

    if [ $delay ] && [ $decay ] && [ $speed ] && [ $depth ]; then
        echo "HERE IN DEFINED PARAMETRES"
        sox $file $DIR/CHORUS/$(basename $file) chorus 0.5 0.5 $delay $decay $speed $depth -$wave_type
        echo $delay $decay $speed $depth $wave_type    
    else
        echo "HERE IN RANDOM PARAMETRES"
        local delay=$(seq 20 .1 100 | shuf | head -n1)
        local decay=0.4
        local speed=$(seq 0.1 .01 5 | shuf | head -n1)
        local depth=$(seq 1 1 10 | shuf | head -n1)
        echo $delay $decay $speed $depth     
        sox $file $DIR/CHORUS/$(basename $file) chorus 0.5 0.5 $delay $decay $speed $depth -t 
    fi  
}

function delay_effect(){
    folder_name='DELAY_EFFECT'
    create_folder $DIR $folder_name 
    cd $DIR/WAV_FILES
    if [ $delay ] && [ $decay ]; then
        echo "HERE IN DEFINED PARAMETRES"
        sox $file $DIR/DELAY_EFFECT/$(basename $file) echos 0.5 0.5 $delay $decay
        echo $delay $decay
    else
        echo "HERE IN RANDOM PARAMETRES"
        local delay=$(seq 100 100 1000 | shuf | head -n1)
        local decay=$(seq 0.1 .1 1 | shuf | head -n1)
        sox $file $DIR/DELAY_EFFECT/$(basename $file) echos 0.5 0.5 $delay $decay
        echo $delay $decay
    fi  
}

function reverb_effect(){
    folder_name='REVERB_EFFECT'
    create_folder $DIR $folder_name 
    cd $DIR/WAV_FILES
    if [ $reverberance ]; then
        echo "HERE IN DEFINED PARAMETRES"
        sox -v 0.9 $file $DIR/REVERB_EFFECT/$(basename $file) reverb $reverberance
        echo $reverberance
    else
        echo "HERE IN RANDOM PARAMETRES"
        local reverberance=$(seq 0 1 100 | shuf | head -n1)
        sox -v 0.9 $file $DIR/REVERB_EFFECT/$(basename $file) reverb $reverberance
        echo $reverberance
    fi  
}

function extract_from_STAT(){
    
    #**************************** POSSIBLE OPTIONS **************

    #Samples read:           
    #Length (seconds):     11.102041
    #Scaled by:         2147483647.0
    #Maximum amplitude:     0.989990
    #Minimum amplitude:    -0.893250
    #Midline amplitude:     0.048370
    #Mean    norm:          0.047038
    #Mean    amplitude:     0.000003
    #RMS     amplitude:     0.078386
    #Maximum delta:         0.710480
    #Minimum delta:         0.000000
    #Mean    delta:         0.004723
    #RMS     delta:         0.011052
    #Rough   frequency:          989
    #Volume adjustment:        1.010
    
    value=$(sox "$audio" -n stat 2>&1 |\
    grep "$value_name" |\
    sed 's/[^0-9.-]*//g')
}

function compute_SNR(){
    
    value_name="RMS     amplitude:"
    local audio=$DIR/NOISE_ADDING/$(basename $file)                     # Treiem valors del fitxer original
    extract_from_STAT
    local RMS_file=$value                                               # valor RMS de l'àudio original
        
    local audio=$root/program_samples/$noiseDIR/$(basename $NOISE_SAMPLE)            # Treiem valors del soroll
    extract_from_STAT
    local RMS_noise=$value                                              # valor RMS del soroll

    echo "RMS FROM FILE: " $RMS_file " RMS FROM NOISE: " $RMS_noise

    local quocient=`echo " scale=4; $RMS_file/$RMS_noise" | bc`
    #echo "RATIO: " $quocient
    quocient=`echo " l($quocient)/l(10) " | bc -l`
    SNR=`echo " 20*$quocient " | bc`
    
    echo "SNR: " $SNR

}





function room_impulse_response(){
    folder_name='RIR_GENERATOR'
    create_folder $DIR $folder_name 
    cd $DIR/WAV_FILES
    # TREURE FS i passarla al python
    fs=$(soxi -r $file)
    n_samples=$(soxi -s $file) 
    #echo ${room_dimensions[0]} ${room_dimensions[1]} ${room_dimensions[2]}        
    
    reverb_time=0.2
    echo $reverb_time
    cd $root
    python3 ROOM_generator.py $DIR/temp $fs
    
    cd $DIR
    sox $DIR/WAV_FILES/$file $DIR/RIR_GENERATOR/$(basename $file) fir $DIR/temp/coefs_RIR.txt     

}

# FUNCIONS D'INFORMACIÓ D'ERRRORS

function IN_FILE_error(){
    cd $root
    sed -n '2,4p' ./program/usage.sh
    sed -n '14,15p' ./program/usage.sh
    sed -n '16,20p' ./program/usage.sh
}

function DA_method_error(){
    cd $root
    sed -n '4,5p' ./program/usage.sh
    sed -n '14,15p' ./program/usage.sh
    sed -n '20,28p' ./program/usage.sh 
}

function IN_OPTION_error(){
    cd $root
    sed -n '6,8p' ./program/usage.sh
    sed -n '14,15p' ./program/usage.sh
    sed -n '29,32p' ./program/usage.sh
}

function check_configuration(){
#This function is used to check the parameters specified in the configuration.sh file to fit the requireds by the programm. '
    pitch_conf_error
    time_conf_error
    noise_conf_error
    RIR_conf_error
}

function pitch_conf_error(){
    local re='^[0-9]+([.][0-9]+)?$'
    if [ $shift_mode != "random" ] && [ $shift_mode != "fixed" ]; then
        echo "PITCH SHITING CONFIGURATION ERROR --> shift_mode is not [fixed] or [random]"
        exit
    elif ! [[ $pitch_factor =~ $re ]] ; then
        echo "PITCH SHITING CONFIGURATION ERROR --> pitch_factor is not a number"
        exit
    elif [[ $shift_start != "" ]] && ! [[ $shift_start =~ $re ]] ; then
        echo "PITCH SHITING CONFIGURATION ERROR --> shift_start is not a number"
        exit
    elif [[ $shift_end != "" ]] && ! [[ $shift_end =~ $re ]] ; then
        echo "PITCH SHITING CONFIGURATION ERROR --> shift_end is not a number"
        exit
    fi
}

function time_conf_error(){
    local re='^[0-9]+([.][0-9]+)?$'
    if [ $stretch_mode != "random" ] && [ $stretch_mode != "fixed" ]; then
        echo "TIME STRETCHING CONFIGURATION ERROR --> stretch_mode is not [fixed] or [random]"
        exit
    elif ! [[ $speed_factor =~ $re ]] ; then
        echo "TIME STRETCHING CONFIGURATION ERROR --> speed_factor is not a number"
        exit
    elif [[ $stretch_start != "" ]] && ! [[ $stretch_start =~ $re ]] ; then
        echo "TIME STRETCHING CONFIGURATION ERROR --> stretch_start is not a number"
        exit
    elif [[ $stretch_end != "" ]] && ! [[ $stretch_end =~ $re ]] ; then
        echo "TIME STRETCHING CONFIGURATION ERROR --> stretch_end is not a number"
        exit
    fi
}

function noise_conf_error(){
    if [[ $NOISE_SAMPLE != "" ]]; then
        if ! [ -f $root/program_samples/$NOISE_SAMPLE ]; then
        echo "NOISE ADDING CONFIGURATION ERROR --> $NOISE_SAMPLE is not a file in /program_samples"  
        exit  
        fi
    fi
}


function RIR_conf_error(){
    if ! [ -f $root/program_samples/$RIR_file ]; then
        echo "RIR FILTER CONFIGURATION ERROR --> $RIR_file is not a file in /program_samples"  
        exit  
    fi
}

function  chorus_conf_error(){
    local re='^[0-9]+([.][0-9]+)?$'
    if [[ $delay != "" ]] && ! [[ $delay =~ $re ]] ; then
        echo "CHORUS CONFIGURATION ERROR --> delay is not a number"
        exit
    elif [[ $decay != "" ]] && ! [[ $decay =~ $re ]] ; then
        echo "CHORUS CONFIGURATION ERROR --> decay is not a number"
        exit
    elif [[ $speed != "" ]] && ! [[ $speed =~ $re ]] ; then
        echo "CHORUS CONFIGURATION ERROR --> speed is not a number"
        exit
    elif [[ $depth != "" ]] && ! [[ $depth =~ $re ]] ; then
        echo "CHORUS CONFIGURATION ERROR --> depth is not a number"
        exit
    elif [ $wave_type != "t" ] || [ $wave_type != "t" ]; then
        echo "CHORUS CONFIGURATION ERROR --> wave_type should be [t] or [s]"
        exit
    fi
}
