pley(){
    /mnt/c/Program\ Files\ \(x86\)/sox-14-4-2/sox.exe $1 -t waveaudio
}

# per poder fer-ne ús des del terminal --> source ./function_lib/function 


function EXTENSION_2_WAV(){
    if [ "${n##*.}" != 'wav' ]; then       
        if [ $permision = "y" ]; then
            echo "CONVERTING " $n " in a .wav file" 
            if [ "${n##*.}" = 'mp3' ]; then
                file=$(basename $n .mp3).wav
                sox -v 0.99 $n -c 1 $root/$workingDIR/$file
                rm $n
            elif [ "${n##*.}" = 'raw' ]; then
                file=$(basename $n .raw).wav
                sox -t raw -r 44100 -b 16 -c 1 -L -e signed-integer $n $root/$workingDIR/$file
                rm $n
            else
                echo "DATA AUGMENTATION SOFTWARE FAIL : file EXTENSION not supported"
            fi
        else
            exit
        fi
    fi
    
}

function pitch_shifting(){
    if [ "$out_dir" == "" ]; then               #OUTPUT DIR NOT SPECIFIED
        cd $DIR
        folder_name='PITCH_SHIFT'
        create_folder $DIR $folder_name
    fi 
    
    cd $root/$workingDIR 

    local tf=$(soxi -D  $file)

    pitch_factor_aux=$pitch_factor
    shift_start_aux=$shift_start
    shift_end_aux=$shift_end

    local len=${#pitch_factor[@]}
    if [ -z $pitch_factor ]; then
        pitch_factor=$(seq 0.5 0.01 2 | shuf | head -n1)           # Valor random generant en cent
    elif ! [ $len == 1 ]; then
        pitch_factor=$(seq ${pitch_factor[0]} 0.01  ${pitch_factor[1]} | shuf | head -n1)
    fi

    aux=`echo "l($pitch_factor)/l(2)" | bc -l`
    cents_pitch_factor=`echo "1200*$aux" | bc` 
    
    

    local len=${#shift_start[@]}
    if [ -z $shift_start ]; then
        shift_start=$(seq 0 .01 $tf | shuf | head -n1)
    
    elif [ $shift_start == "ini" ]; then
        shift_start=0
    elif ! [ $len == 1 ]; then
        shift_start=$(seq ${shift_start[0]} .01  ${shift_start[1]} | shuf | head -n1) 
    fi

    local len=${#shift_end[@]}
    if [ -z $shift_end ]; then
        shift_end=$(seq $shift_start .01 $tf | shuf | head -n1)
    elif [ $len == 2 ]; then
        shift_end=$(seq ${shift_end[0]} .01  ${shift_end[1]} | shuf | head -n1) 
    elif [ $shift_end == "end" ]; then
        shift_end=$tf
    fi

    #echo "PITCH FACTOR IS: " $pitch_factor
    #echo "START IS: "  $shift_start
    #echo "END IS: "  $shift_end

    if [ $pitch_factor == 0 ]; then
        sox -v 0.99 $file $DIR/$folder_name/$(basename $file) 
    else
        if ! [[ $shift_start == 0 ]] && ! [[ $shift_end == $tf  ]]; then
            #echo "SOX BEND"
                local aux_end=`echo "$shift_end-$shift_start" | bc`
                sox -v 0.5 $file $DIR/$folder_name/$(basename $file) bend $shift_start,$cents_pitch_factor,$aux_end      #inci, cents, longitud del canvi (NO final del canvi)          
        else
            #echo "SOX PITCH"
            sox -v 0.99 $file $DIR/$folder_name/$(basename $file) pitch $cents_pitch_factor
        fi
    fi  

    echo "pitch shiting to " $file  "; --> pitch_factor: " $pitch_factor" shift_start: " $shift_start "shift_end: " $shift_end
    
    pitch_factor=$pitch_factor_aux
    shift_start=$shift_start_aux
    shift_end=$shift_end_aux
    
}



function time_scretching(){

    if [ "$out_dir" == "" ]; then               #OUTPUT DIR NOT SPECIFIED
        cd $DIR
        folder_name='TIME_STRETCHING'
        create_folder $DIR $folder_name
    fi 

    cd $root/$workingDIR 
    
    local tf=$(soxi -D  $file)

    speed_factor_aux=$speed_factor
    stretch_start_aux=$stretch_start
    stretch_end_aux=$stretch_end

    local len=${#speed_factor[@]}
    if [ -z $speed_factor ]; then
        speed_factor=$(seq 0.1 .01 5 | shuf | head -n1)           #número aleatòri entre [0.1, 5] 
    elif ! [ $len == 1 ]; then
        speed_factor=$(seq ${speed_factor[0]} .01  ${speed_factor[1]} | shuf | head -n1) 

    fi

    local len=${#stretch_start[@]}
    if [ -z $stretch_start ]; then
        stretch_start=$(seq 0 .01 $tf | shuf | head -n1)
    elif [ $stretch_start == "ini" ]; then
        stretch_start=0
    elif ! [ $len == 1 ]; then
        stretch_start=$(seq ${stretch_start[0]} .01  ${stretch_start[1]} | shuf | head -n1) 
    fi

    local len=${#stretch_end[@]}
    if [ -z $stretch_end ]; then
        stretch_end=$(seq $stretch_start .01 $tf | shuf | head -n1)
    elif [ $len == 2 ]; then
        stretch_end=$(seq ${stretch_end[0]} .01  ${stretch_end[1]} | shuf | head -n1) 
    elif [ $stretch_end == "end" ]; then
        stretch_end=$tf
    fi
    : '
    echo "SPEED IS: " $speed_factor
    echo "START IS: "  $stretch_start
    echo "END IS: "  $stretch_end
    '
    if [ $speed_factor == 0 ]; then   
        sox $file $DIR/$folder_name/$(basename $file) 
    else
        if [[ $stretch_start == 0 ]] && [[ $stretch_end == $tf  ]]; then
            #echo "ALL FILE SPEED CHANGE"
            sox $file $DIR/$folder_name/$(basename $file) tempo $speed_factor
        else 
            trim_segments $tf
            sox $root/temp/segment2.wav $root/temp/segment2_speed.wav tempo $speed_factor           #TIME STRETCHING del segment
            sox $root/temp/segment1.wav $root/temp/segment2_speed.wav $root/temp/segment3.wav $DIR/$folder_name/$(basename $file)       #Combinar segments
        fi
    fi  
    
    echo "time stretching to " $file "; --> speed_factor: " $speed_factor " stretch_start: " $stretch_start "stretch_end: " $stretch_end

    speed_factor=$speed_factor_aux
    stretch_start=$stretch_start_aux
    stretch_end=$stretch_end_aux
}


function trim_segments(){
    sox $file $root/temp/segment1.wav trim 0 $stretch_start                              #Retallar el primer segment
    local duration_2=$stretch_end-$stretch_start                                        #Establir durada del segon segment
    sox $file $root/temp/segment2.wav trim $stretch_start $duration_2                    #Retallar segon segment
    local duration_3=$tf-$stretch_end                                                   #Establir durada del tercer segment
    sox $file $root/temp/segment3.wav trim $end $stretch_end                             #Retallar tercer segment
}




function noise_adding(){

    if [ "$out_dir" == "" ]; then               #OUTPUT DIR NOT SPECIFIED
        cd $DIR
        folder_name='NOISE_ADDING'
        create_folder $DIR $folder_name 
    fi 

    cd $root/$workingDIR

    NOISE_SAMPLE_AUX=$NOISE_SAMPLE

    local file_duration=$(soxi -D $file)                                           # Durada del senyal original
    local file_sr=$(soxi -r $file)                                                 # SR del senyal original
    local file_channels=$(soxi -c $file)                                           # Canals del senyal original
    local file_bits=$(soxi -b $file)                                               # Bits del senyal original

    #echo  $file_sr $file_channels $file_bits

    if [ -z $NOISE_SAMPLE ]; then                                        
        
        noise_generator $file_duration $file_sr $file_channels $file_bits              # Sintesi del soroll
        noise_file=$root/temp/noise.wav
        adjust_gain

    else 
        #echo "REAL NOISE"
                cd $root/$workingDIR
        if [ -f $root/$NOISE_SAMPLE ]; then
            NOISE_SAMPLE=$NOISE_SAMPLE
        elif [ -d $root/$NOISE_SAMPLE ]; then
            cd $root/$NOISE_SAMPLE
            folder=$NOISE_SAMPLE
            get_random_file 
            NOISE_SAMPLE=$folder/$random_file
            cd $root/$workingDIR
        fi

        check_sample_rate $NOISE_SAMPLE
        check_channels $NOISE_SAMPLE
        check_bits $NOISE_SAMPLE
        
        local tf=$(soxi -D $file)                                                       # llargada de la mostra original
        local tf_noise=$(soxi -D  $root/$NOISE_SAMPLE)                                  # llargada de la mostra de soroll
        
        #echo "FILE LENGHT: " $tf "; NOISE LENGHT: " $tf_noise
        #change_noise_volume

        if [ $(echo "$tf_noise > $tf" |bc -l) == 1 ]; then                                      # si el temps noise és superior a la mostra, no cal allargar-lo
            echo "CASE 1"
            sox $root/$NOISE_SAMPLE $root/temp/noise.wav trim 0 $tf                 # retallar soroll a llargada de loriginal
            #sox -m $root/temp/noise.wav $file $DIR/$folder_name/$(basename $file)     # mescla soroll retallat i original
        else
            echo "CASE 2"
            local aux=`echo "$tf/$tf_noise" | bc`                                       # Part entera
            cp $root/$NOISE_SAMPLE $root/temp/noise_aux.wav              # Copia a la carpeta temporal per tenir audio incial a replicar
            for (( c=1; c<=$aux; c++ )); do  
                sox $root/$NOISE_SAMPLE $root/temp/noise_aux.wav $root/temp/noise_aux.wav          # replicar tants cops com parts enteres
            done
            sox $root/temp/noise_aux.wav $root/temp/noise.wav trim 0 $tf                  # Retall del soroll replicat
            #sox -m $root/temp/noise.wav $file $DIR/$folder_name/$(basename $file)         # mescla
        fi
        noise_file=$root/temp/noise.wav
        adjust_gain
        
    fi
    

    if [[ "$NOISE_SAMPLE" ==  "" ]]; then
        NOISE_SAMPLE="random $NOISE_TYPE noise"  
    fi

    echo "noise adding to " $file "; --> noise sample:" $NOISE_SAMPLE

    NOISE_SAMPLE=$NOISE_SAMPLE_AUX
    #compute_SNR        #NO te sentit calcular SNR pq el soroll no se lia ha aplicat el $volume, s'ha aplicat directament a la mescla.


}


function noise_generator(){
    NOISE_TYPE='white'
    if [ $NOISE_TYPE = 'white' ]; then
        sox -r $file_sr -c $file_channels -b $file_bits -n $root/temp/noise.wav synth $file_duration whitenoise vol 0.05
    elif [ $NOISE_TYPE = 'pink' ]; then
        sox -r $file_sr -c $file_channels -b $file_bits -n $root/temp/noise.wav synth $file_duration pinknoise vol 0.05
    elif [ $NOISE_TYPE = 'brown' ]; then
        sox -r $file_sr -c $file_channels -b $file_bits -n $root/temp/noise.wav synth $file_duration brownnoise vol 0.05
    fi
}


function adjust_gain(){
        value_name="RMS     amplitude:"
        
        audio=$file
        extract_from_STAT
        file_RMS=$value

        audio=$noise_file
        extract_from_STAT
        noise_RMS=$value

        echo "FILE RMS VALUE" $file_RMS
        echo "NOISE RMS VALUE" $noise_RMS

        input=$ratio_dB
        dB_2_linear
        ratio_lin=$output
        echo "RATIO_LIN" $ratio_lin

        factor_lin=`echo " scale=6; $ratio_lin*$noise_RMS/$file_RMS" | bc`

        input=$factor_lin
        linear_2_dB
        factor_dB=$output 
        echo "FACTOR: " $factor_lin
        echo "FACTOR(dB): " $factor_dB


        sox $file $root/temp/amp_file.wav gain -b $factor_dB
        #sox -v $factor_lin $file $root/temp/amp_file.wav 

        audio=$root/temp/amp_file.wav
        extract_from_STAT
        amp_file_RMS=$value
        echo "AMP FILE RMS VALUE" $amp_file_RMS

        # !!!! sox -m $root/temp/noise.wav $file $DIR/$folder_name/$(basename $file) gain -b $output    # INCORRECTE PQ AMPLIFIQUES LA MESCLA
 
        sox -m $root/temp/noise.wav $root/temp/amp_file.wav $DIR/$folder_name/$(basename $file)   # mescla
        
        audio=$DIR/$folder_name/$(basename $file) 
        extract_from_STAT
        mix_file_RMS=$value

        echo "MIX 1 FILE RMS VALUE" $mix_file_RMS

        SNR_lin=`echo " scale=6; $ratio_lin*$mix_file_RMS/$noise_RMS" | bc`
        echo "SNR_lin: " $SNR_lin


}


function change_noise_volume(){

    value_name="RMS     amplitude:"
    local audio=$file                                               # Treiem valors del fitxer original
    extract_from_STAT
    local RMS_file=$value                                               # valor RMS de l'àudio original
    if [ -z $NOISE_SAMPLE ]; then
        local audio=$root/temp/noise.wav                                    # Treiem valors del soroll
    else
        local audio=$root/program_samples/$NOISE_SAMPLE                                     # Treiem valors del soroll        
    fi
    extract_from_STAT
    local RMS_noise=$value      


    local aux=`echo " scale=6; $RMS_file/$RMS_noise" | bc`
    echo "file/noise: " $aux
    product=`echo "$RMS_noise*$ratio" | bc`

    volume=`echo " scale=6; $RMS_file/$product" | bc`

    echo "FILE RMS: " $RMS_file "RMS NOISE: " $RMS_noise  "VOLUME FACTOR: " $volume

    : '
    sox -v $volume $root/program_samples/$NOISE_SAMPLE $root/temp/auxiliar_audio.wav
    local audio=$root/temp/auxiliar_audio.wav
    extract_from_STAT 
    local RMS_noise=$value    
    echo "MODIFIED NOISE RMS: " $RMS_noise  

    cp $root/temp/auxiliar_audio.wav $root/program_samples/$noiseDIR/$(basename $NOISE_SAMPLE) 
    '

}


function check_sample_rate(){
    file_sr=$(soxi -r $file)
    noise_sr=$(soxi -r $root/$NOISE_SAMPLE)
    if [ $file_sr -ne $noise_sr ]; then
        noiseDIR=${NOISE_SAMPLE%/*}
        echo "Selected noise sample has not same Sampling Freq that input file. It must be converted"
        echo "CAUTION: ORIGINAL FILE WILL BE REMOVED!!"
        echo "Do you want to convert it? (y/n)"
        read permision
        if [ $permision = "y" ]; then
            cd $root
            sox $root/$NOISE_SAMPLE -r $file_sr $root/temp/$(basename $NOISE_SAMPLE)
            rm $root/$NOISE_SAMPLE
            cp $root/temp/$(basename $NOISE_SAMPLE) $root/$noiseDIR/$(basename $NOISE_SAMPLE) 

        else
            exit
        fi
        cd $root/$workingDIR
    fi
}

function check_channels(){
    file_ch=$(soxi -c $file)
    noise_ch=$(soxi -c $root/$NOISE_SAMPLE)
    if [ $file_ch -ne $noise_ch ]; then
        noiseDIR=${NOISE_SAMPLE%/*}
        echo "Selected noise sample has not same number of Channels that input file. It must be converted"
        echo "CAUTION: ORIGINAL FILE WILL BE REMOVED!!"
        echo "Do you want to convert it? (y/n)"
        read permision
        if [ $permision = "y" ]; then
            echo $(basename $NOISE_SAMPLE)
            cd $root
            sox $root/$NOISE_SAMPLE -c $file_sr $root/temp/$(basename $NOISE_SAMPLE)
            rm $root/$NOISE_SAMPLE
            cp $root/temp/$(basename $NOISE_SAMPLE) $root/$noiseDIR/$(basename $NOISE_SAMPLE) 

        else
            exit
        fi
        cd $root/$workingDIR
    fi
}

function check_bits(){
    local file_bits=$(soxi -b $file)
    local noise_bits=$(soxi -b $root/$NOISE_SAMPLE)
    if [ $file_bits -ne $noise_bits ]; then
        noiseDIR=${NOISE_SAMPLE%/*}
        echo "Selected noise sample has not same bit number that input file. It must be converted"
        echo "CAUTION: ORIGINAL FILE WILL BE REMOVED!!"
        echo "Do you want to convert it? (y/n)"
        read permision
        if [ $permision = "y" ]; then
            echo $(basename $NOISE_SAMPLE)
            cd $root
            sox $root/$NOISE_SAMPLE -b $file_sr $root/temp/$(basename $NOISE_SAMPLE)
            rm $root/$NOISE_SAMPLE
            cp $root/temp/$(basename $NOISE_SAMPLE) $root/$noiseDIR/$(basename $NOISE_SAMPLE) 

        else
            exit
        fi
        cd $root/$workingDIR
    fi
}




function sample_expansion(){
    local aux=`echo "$tf/$tf_noise" | bc`
    cp $DIR/NOISE_SAMPLES/metro_trim.wav $root/temp/noise_aux.wav 
    for (( c=1; c<=$aux; c++ )); do  
        sox $DIR/NOISE_SAMPLES/metro_trim.wav $root/temp/noise_aux.wav $root/temp/noise_aux.wav 
    done
    tf_noise=$(soxi -D  $root/temp/noise_aux.wav)
    sox $root/temp/noise_aux.wav $root/temp/noise.wav trim 0 $tf
    sox -m $root/temp/noise.wav $file $DIR/$folder_name/$(basename $file)

}


function FIR_conv(){

    if [ "$out_dir" == "" ]; then               #OUTPUT DIR NOT SPECIFIED
        cd $DIR
        folder_name='RIR_filter'
        create_folder $DIR $folder_name
    fi 

    cd $root/$workingDIR
    
    RIR_file_aux=$RIR_file


    if [ -f $root/$RIR_file ]; then
        sox -v 0.5 $file $DIR/$folder_name/$(basename $file) fir $root/$RIR_file
    elif [ -d $root/$RIR_file ]; then
        cd $root/$RIR_file
        get_random_file 
        cd $root/$workingDIR
        sox -v 0.9 $file $DIR/$folder_name/$(basename $file) fir $root/$RIR_file/$random_file
        RIR_file=$random_file
    fi
    echo "RIR filter to  " $file "--> file: " $RIR_file
    
    RIR_file=$RIR_file_aux


}

function freq_masking(){
    if [ "$out_dir" == "" ]; then               #OUTPUT DIR NOT SPECIFIED
        cd $DIR
        folder_name='FREQ_MASKING'
        create_folder $DIR $folder_name
    fi 
    cd $root/$workingDIR

    local f_ini=`echo " $f_centre-$width" | bc`
    local f_fin=`echo " $f_centre+$width" | bc`
    #echo $f_ini $f_fin
    sox $file $DIR/$folder_name/$(basename $file) sinc $f_fin-$f_ini

    echo "Frequency masking to  " $file "--> f_centre: " $f_centre " width: " $width

}




function extract_from_STAT(){
    
    #**************************** POSSIBLE OPTIONS **************

    #Samples read:           
    #Length (seconds):     11.102041
    #Scaled by:         2147483647.0
    #Maximum amplitude:     0.989990
    #Minimum amplitude:    -0.893250
    #Midline amplitude:     0.048370
    #Mean    norm:          0.047038
    #Mean    amplitude:     0.000003
    #RMS     amplitude:     0.078386
    #Maximum delta:         0.710480
    #Minimum delta:         0.000000
    #Mean    delta:         0.004723
    #RMS     delta:         0.011052
    #Rough   frequency:          989
    #Volume adjustment:        1.010
    
    value=$(sox "$audio" -n stat 2>&1 |\
    grep "$value_name" |\
    sed 's/[^0-9.-]*//g')
}

function compute_SNR(){
    
    value_name="RMS     amplitude:"
    local audio=$DIR/$folder_name/$(basename $file)                     # Treiem valors del fitxer original
    extract_from_STAT
    local RMS_file=$value                                               # valor RMS de l'àudio original
        
    if [ -z $NOISE_SAMPLE ]; then
        local audio=$root/temp/noise.wav                                    # Treiem valors del soroll
    else
        local audio=$root/program_samples/$NOISE_SAMPLE                                     # Treiem valors del soroll        
    fi
    extract_from_STAT
    local RMS_noise=$value      

    echo "RMS FROM FILE: " $RMS_file " RMS FROM NOISE: " $RMS_noise

    local quocient=`echo " scale=4; $RMS_file/$RMS_noise" | bc`
    #echo "RATIO: " $quocient
    quocient=`echo " l($quocient)/l(10) " | bc -l`
    SNR=`echo " 20*$quocient " | bc`
    
    echo "SNR: " $SNR

}





function room_impulse_response(){
    folder_name='RIR_GENERATOR'
    create_folder $DIR $folder_name 
    cd $DIR/WAV_FILES
    # TREURE FS i passarla al python
    fs=$(soxi -r $file)
    n_samples=$(soxi -s $file) 
    #echo ${room_dimensions[0]} ${room_dimensions[1]} ${room_dimensions[2]}        
    
    reverb_time=0.2
    echo $reverb_time
    cd $root
    python3 ROOM_generator.py $root/temp $fs
    
    cd $DIR
    sox $DIR/WAV_FILES/$file $DIR/RIR_GENERATOR/$(basename $file) fir $root/temp/coefs_RIR.txt     

}

